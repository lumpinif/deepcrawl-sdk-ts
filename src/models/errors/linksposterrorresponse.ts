/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { DeepcrawlAppError } from "./deepcrawlapperror.js";

export type LinksPostErrorResponseData = {
  success: boolean;
  /**
   * The URL that was being processed when the error occurred
   */
  targetUrl: string;
  /**
   * Error message describing what went wrong
   */
  error: string;
  /**
   * ISO timestamp when the error occurred
   */
  timestamp: string;
  tree?: models.LinksTree | null | undefined;
};

export class LinksPostErrorResponse extends DeepcrawlAppError {
  success: boolean;
  /**
   * The URL that was being processed when the error occurred
   */
  targetUrl: string;
  /**
   * Error message describing what went wrong
   */
  error: string;
  /**
   * ISO timestamp when the error occurred
   */
  timestamp: string;
  tree?: models.LinksTree | null | undefined;

  /** The original data that was passed to this error instance. */
  data$: LinksPostErrorResponseData;

  constructor(
    err: LinksPostErrorResponseData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.targetUrl = err.targetUrl;
    this.error = err.error;
    this.timestamp = err.timestamp;
    if (err.tree != null) this.tree = err.tree;

    this.name = "LinksPostErrorResponse";
  }
}

/** @internal */
export const LinksPostErrorResponse$inboundSchema: z.ZodType<
  LinksPostErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  targetUrl: z.string(),
  error: z.string(),
  timestamp: z.string(),
  tree: z.nullable(models.LinksTree$inboundSchema).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new LinksPostErrorResponse(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type LinksPostErrorResponse$Outbound = {
  success: boolean;
  targetUrl: string;
  error: string;
  timestamp: string;
  tree?: models.LinksTree$Outbound | null | undefined;
};

/** @internal */
export const LinksPostErrorResponse$outboundSchema: z.ZodType<
  LinksPostErrorResponse$Outbound,
  z.ZodTypeDef,
  LinksPostErrorResponse
> = z.instanceof(LinksPostErrorResponse)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    targetUrl: z.string(),
    error: z.string(),
    timestamp: z.string(),
    tree: z.nullable(models.LinksTree$outboundSchema).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinksPostErrorResponse$ {
  /** @deprecated use `LinksPostErrorResponse$inboundSchema` instead. */
  export const inboundSchema = LinksPostErrorResponse$inboundSchema;
  /** @deprecated use `LinksPostErrorResponse$outboundSchema` instead. */
  export const outboundSchema = LinksPostErrorResponse$outboundSchema;
  /** @deprecated use `LinksPostErrorResponse$Outbound` instead. */
  export type Outbound = LinksPostErrorResponse$Outbound;
}
