/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Metrics for the read operation.
 */
export type Metrics = {
  /**
   * Human-readable representation of the operation duration
   */
  readableDuration: string;
  /**
   * Duration of the operation in milliseconds
   */
  duration: number;
  /**
   * Timestamp in milliseconds when the operation started
   */
  startTime: number;
  /**
   * Timestamp in milliseconds when the operation finished
   */
  endTime: number;
};

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> =
  z.object({
    readableDuration: z.string(),
    duration: z.number(),
    startTime: z.number(),
    endTime: z.number(),
  });

/** @internal */
export type Metrics$Outbound = {
  readableDuration: string;
  duration: number;
  startTime: number;
  endTime: number;
};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<
  Metrics$Outbound,
  z.ZodTypeDef,
  Metrics
> = z.object({
  readableDuration: z.string(),
  duration: z.number(),
  startTime: z.number(),
  endTime: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
  /** @deprecated use `Metrics$inboundSchema` instead. */
  export const inboundSchema = Metrics$inboundSchema;
  /** @deprecated use `Metrics$outboundSchema` instead. */
  export const outboundSchema = Metrics$outboundSchema;
  /** @deprecated use `Metrics$Outbound` instead. */
  export type Outbound = Metrics$Outbound;
}

export function metricsToJSON(metrics: Metrics): string {
  return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}

export function metricsFromJSON(
  jsonString: string,
): SafeParseResult<Metrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metrics' from JSON`,
  );
}
