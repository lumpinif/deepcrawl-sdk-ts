/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type LinkExtractionOptions = {
  /**
   * Whether to include links from other domains
   */
  includeExternal?: boolean | undefined;
  /**
   * Whether to include media files (images, videos, docs)
   */
  includeMedia?: boolean | undefined;
  /**
   * Array of regex patterns to exclude URLs
   */
  excludePatterns?: Array<string> | undefined;
  /**
   * Whether to remove query parameters from URLs
   */
  removeQueryParams?: boolean | undefined;
};

/** @internal */
export const LinkExtractionOptions$inboundSchema: z.ZodType<
  LinkExtractionOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  includeExternal: z.boolean().optional(),
  includeMedia: z.boolean().optional(),
  excludePatterns: z.array(z.string()).optional(),
  removeQueryParams: z.boolean().optional(),
});

/** @internal */
export type LinkExtractionOptions$Outbound = {
  includeExternal?: boolean | undefined;
  includeMedia?: boolean | undefined;
  excludePatterns?: Array<string> | undefined;
  removeQueryParams?: boolean | undefined;
};

/** @internal */
export const LinkExtractionOptions$outboundSchema: z.ZodType<
  LinkExtractionOptions$Outbound,
  z.ZodTypeDef,
  LinkExtractionOptions
> = z.object({
  includeExternal: z.boolean().optional(),
  includeMedia: z.boolean().optional(),
  excludePatterns: z.array(z.string()).optional(),
  removeQueryParams: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkExtractionOptions$ {
  /** @deprecated use `LinkExtractionOptions$inboundSchema` instead. */
  export const inboundSchema = LinkExtractionOptions$inboundSchema;
  /** @deprecated use `LinkExtractionOptions$outboundSchema` instead. */
  export const outboundSchema = LinkExtractionOptions$outboundSchema;
  /** @deprecated use `LinkExtractionOptions$Outbound` instead. */
  export type Outbound = LinkExtractionOptions$Outbound;
}

export function linkExtractionOptionsToJSON(
  linkExtractionOptions: LinkExtractionOptions,
): string {
  return JSON.stringify(
    LinkExtractionOptions$outboundSchema.parse(linkExtractionOptions),
  );
}

export function linkExtractionOptionsFromJSON(
  jsonString: string,
): SafeParseResult<LinkExtractionOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkExtractionOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkExtractionOptions' from JSON`,
  );
}
