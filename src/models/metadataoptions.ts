/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Options for metadata extraction.
 */
export type MetadataOptions = {
  /**
   * Extract page title from title tag or meta title
   */
  title?: boolean | undefined;
  /**
   * Extract meta description content
   */
  description?: boolean | undefined;
  /**
   * Extract page language from html lang attribute
   */
  language?: boolean | undefined;
  /**
   * Extract canonical URL from link rel="canonical"
   */
  canonical?: boolean | undefined;
  /**
   * Extract robots directives from meta robots
   */
  robots?: boolean | undefined;
  /**
   * Extract author information from meta author
   */
  author?: boolean | undefined;
  /**
   * Extract meta keywords and convert to array
   */
  keywords?: boolean | undefined;
  /**
   * Extract favicon URL from link rel="icon" or similar
   */
  favicon?: boolean | undefined;
  /**
   * Extract Open Graph metadata (og:* properties)
   */
  openGraph?: boolean | undefined;
  /**
   * Extract Twitter Card metadata (twitter:* properties)
   */
  twitter?: boolean | undefined;
  /**
   * Check if iframe embedding is allowed
   */
  isIframeAllowed?: boolean | undefined;
};

/** @internal */
export const MetadataOptions$inboundSchema: z.ZodType<
  MetadataOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.boolean().default(true),
  description: z.boolean().default(true),
  language: z.boolean().default(true),
  canonical: z.boolean().default(true),
  robots: z.boolean().default(true),
  author: z.boolean().default(true),
  keywords: z.boolean().default(true),
  favicon: z.boolean().default(true),
  openGraph: z.boolean().default(true),
  twitter: z.boolean().default(true),
  isIframeAllowed: z.boolean().default(true),
});

/** @internal */
export type MetadataOptions$Outbound = {
  title: boolean;
  description: boolean;
  language: boolean;
  canonical: boolean;
  robots: boolean;
  author: boolean;
  keywords: boolean;
  favicon: boolean;
  openGraph: boolean;
  twitter: boolean;
  isIframeAllowed: boolean;
};

/** @internal */
export const MetadataOptions$outboundSchema: z.ZodType<
  MetadataOptions$Outbound,
  z.ZodTypeDef,
  MetadataOptions
> = z.object({
  title: z.boolean().default(true),
  description: z.boolean().default(true),
  language: z.boolean().default(true),
  canonical: z.boolean().default(true),
  robots: z.boolean().default(true),
  author: z.boolean().default(true),
  keywords: z.boolean().default(true),
  favicon: z.boolean().default(true),
  openGraph: z.boolean().default(true),
  twitter: z.boolean().default(true),
  isIframeAllowed: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataOptions$ {
  /** @deprecated use `MetadataOptions$inboundSchema` instead. */
  export const inboundSchema = MetadataOptions$inboundSchema;
  /** @deprecated use `MetadataOptions$outboundSchema` instead. */
  export const outboundSchema = MetadataOptions$outboundSchema;
  /** @deprecated use `MetadataOptions$Outbound` instead. */
  export type Outbound = MetadataOptions$Outbound;
}

export function metadataOptionsToJSON(
  metadataOptions: MetadataOptions,
): string {
  return JSON.stringify(MetadataOptions$outboundSchema.parse(metadataOptions));
}

export function metadataOptionsFromJSON(
  jsonString: string,
): SafeParseResult<MetadataOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataOptions' from JSON`,
  );
}
