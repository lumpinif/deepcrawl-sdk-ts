/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type HTMLCleaningOptions = {
  /**
   * HTML tags to preserve in the output (whitelist)
   */
  allowedHTMLTags?: Array<string> | undefined;
  /**
   * HTML tags to remove from the output (blacklist)
   */
  disallowedHTMLTags?: Array<string> | undefined;
  /**
   * Whether to extract only the main content area, removing navigation, footers, etc.
   */
  extractMainContent?: boolean | undefined;
  /**
   * Base URL for resolving relative URLs (deprecated, use baseUrl parameter instead)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  documentBaseUrl?: string | undefined;
  /**
   * Whether to remove base64 encoded images to reduce payload size
   */
  removeBase64Images?: boolean | undefined;
};

/** @internal */
export const HTMLCleaningOptions$inboundSchema: z.ZodType<
  HTMLCleaningOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowedHTMLTags: z.array(z.string()).optional(),
  disallowedHTMLTags: z.array(z.string()).optional(),
  extractMainContent: z.boolean().default(true),
  documentBaseUrl: z.string().optional(),
  removeBase64Images: z.boolean().default(true),
});

/** @internal */
export type HTMLCleaningOptions$Outbound = {
  allowedHTMLTags?: Array<string> | undefined;
  disallowedHTMLTags?: Array<string> | undefined;
  extractMainContent: boolean;
  documentBaseUrl?: string | undefined;
  removeBase64Images: boolean;
};

/** @internal */
export const HTMLCleaningOptions$outboundSchema: z.ZodType<
  HTMLCleaningOptions$Outbound,
  z.ZodTypeDef,
  HTMLCleaningOptions
> = z.object({
  allowedHTMLTags: z.array(z.string()).optional(),
  disallowedHTMLTags: z.array(z.string()).optional(),
  extractMainContent: z.boolean().default(true),
  documentBaseUrl: z.string().optional(),
  removeBase64Images: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTMLCleaningOptions$ {
  /** @deprecated use `HTMLCleaningOptions$inboundSchema` instead. */
  export const inboundSchema = HTMLCleaningOptions$inboundSchema;
  /** @deprecated use `HTMLCleaningOptions$outboundSchema` instead. */
  export const outboundSchema = HTMLCleaningOptions$outboundSchema;
  /** @deprecated use `HTMLCleaningOptions$Outbound` instead. */
  export type Outbound = HTMLCleaningOptions$Outbound;
}

export function htmlCleaningOptionsToJSON(
  htmlCleaningOptions: HTMLCleaningOptions,
): string {
  return JSON.stringify(
    HTMLCleaningOptions$outboundSchema.parse(htmlCleaningOptions),
  );
}

export function htmlCleaningOptionsFromJSON(
  jsonString: string,
): SafeParseResult<HTMLCleaningOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HTMLCleaningOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HTMLCleaningOptions' from JSON`,
  );
}
