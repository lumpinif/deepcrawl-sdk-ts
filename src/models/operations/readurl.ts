/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * /read POST request body, read options schema
 */
export type ReadUrlRequest = {
  /**
   * The valid URL to read. This URL will be validated and normalized.
   */
  url: string;
  /**
   * Whether to extract metadata from the page.
   */
  metadata?: boolean | null | undefined;
  /**
   * Whether to extract markdown from the page.
   */
  markdown?: boolean | null | undefined;
  /**
   * Whether to return cleaned HTML.
   */
  cleanedHtml?: boolean | null | undefined;
  /**
   * Whether to fetch and parse robots.txt.
   */
  robots?: boolean | null | undefined;
  /**
   * Whether to return raw HTML.
   */
  rawHtml?: boolean | null | undefined;
  /**
   * Options for metadata extraction.
   */
  metadataOptions?: models.MetadataOptions | undefined;
};

/** @internal */
export const ReadUrlRequest$inboundSchema: z.ZodType<
  ReadUrlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  metadata: z.nullable(z.boolean().default(true)),
  markdown: z.nullable(z.boolean().default(true)),
  cleanedHtml: z.nullable(z.boolean().default(false)),
  robots: z.nullable(z.boolean().default(false)),
  rawHtml: z.nullable(z.boolean().default(false)),
  metadataOptions: models.MetadataOptions$inboundSchema.optional(),
});

/** @internal */
export type ReadUrlRequest$Outbound = {
  url: string;
  metadata: boolean | null;
  markdown: boolean | null;
  cleanedHtml: boolean | null;
  robots: boolean | null;
  rawHtml: boolean | null;
  metadataOptions?: models.MetadataOptions$Outbound | undefined;
};

/** @internal */
export const ReadUrlRequest$outboundSchema: z.ZodType<
  ReadUrlRequest$Outbound,
  z.ZodTypeDef,
  ReadUrlRequest
> = z.object({
  url: z.string(),
  metadata: z.nullable(z.boolean().default(true)),
  markdown: z.nullable(z.boolean().default(true)),
  cleanedHtml: z.nullable(z.boolean().default(false)),
  robots: z.nullable(z.boolean().default(false)),
  rawHtml: z.nullable(z.boolean().default(false)),
  metadataOptions: models.MetadataOptions$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadUrlRequest$ {
  /** @deprecated use `ReadUrlRequest$inboundSchema` instead. */
  export const inboundSchema = ReadUrlRequest$inboundSchema;
  /** @deprecated use `ReadUrlRequest$outboundSchema` instead. */
  export const outboundSchema = ReadUrlRequest$outboundSchema;
  /** @deprecated use `ReadUrlRequest$Outbound` instead. */
  export type Outbound = ReadUrlRequest$Outbound;
}

export function readUrlRequestToJSON(readUrlRequest: ReadUrlRequest): string {
  return JSON.stringify(ReadUrlRequest$outboundSchema.parse(readUrlRequest));
}

export function readUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadUrlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadUrlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadUrlRequest' from JSON`,
  );
}
