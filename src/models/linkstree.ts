/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExtractedLinks,
  ExtractedLinks$inboundSchema,
  ExtractedLinks$Outbound,
  ExtractedLinks$outboundSchema,
} from "./extractedlinks.js";
import {
  PageMetadata,
  PageMetadata$inboundSchema,
  PageMetadata$Outbound,
  PageMetadata$outboundSchema,
} from "./pagemetadata.js";
import {
  SkippedLinks,
  SkippedLinks$inboundSchema,
  SkippedLinks$Outbound,
  SkippedLinks$outboundSchema,
} from "./skippedlinks.js";

export type LinksTree = {
  /**
   * The URL of this page
   */
  url: string;
  /**
   * The root URL of the website being crawled
   */
  rootUrl?: string | undefined;
  /**
   * The display name or title of this page
   */
  name?: string | undefined;
  /**
   * Total number of URLs discovered in the entire tree
   */
  totalUrls?: number | undefined;
  /**
   * Time taken to process this page
   */
  executionTime?: string | undefined;
  /**
   * ISO timestamp when this page was last crawled
   */
  lastUpdated: string;
  /**
   * ISO timestamp when this page was last visited (null if never visited)
   */
  lastVisited?: string | null | undefined;
  /**
   * Error message if there was an issue processing this page
   */
  error?: string | undefined;
  metadata?: PageMetadata | undefined;
  /**
   * Cleaned HTML content of the page
   */
  cleanedHtml?: string | undefined;
  extractedLinks?: ExtractedLinks | undefined;
  skippedUrls?: SkippedLinks | undefined;
  /**
   * Array of child LinksTree nodes, each representing a page found under this URL. This creates a recursive tree structure for the entire website hierarchy.
   */
  children?: Array<LinksTree> | undefined;
};

/** @internal */
export const LinksTree$inboundSchema: z.ZodType<
  LinksTree,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  rootUrl: z.string().optional(),
  name: z.string().optional(),
  totalUrls: z.number().optional(),
  executionTime: z.string().optional(),
  lastUpdated: z.string(),
  lastVisited: z.nullable(z.string()).optional(),
  error: z.string().optional(),
  metadata: PageMetadata$inboundSchema.optional(),
  cleanedHtml: z.string().optional(),
  extractedLinks: ExtractedLinks$inboundSchema.optional(),
  skippedUrls: SkippedLinks$inboundSchema.optional(),
  children: z.array(z.lazy(() => LinksTree$inboundSchema)).optional(),
});

/** @internal */
export type LinksTree$Outbound = {
  url: string;
  rootUrl?: string | undefined;
  name?: string | undefined;
  totalUrls?: number | undefined;
  executionTime?: string | undefined;
  lastUpdated: string;
  lastVisited?: string | null | undefined;
  error?: string | undefined;
  metadata?: PageMetadata$Outbound | undefined;
  cleanedHtml?: string | undefined;
  extractedLinks?: ExtractedLinks$Outbound | undefined;
  skippedUrls?: SkippedLinks$Outbound | undefined;
  children?: Array<LinksTree$Outbound> | undefined;
};

/** @internal */
export const LinksTree$outboundSchema: z.ZodType<
  LinksTree$Outbound,
  z.ZodTypeDef,
  LinksTree
> = z.object({
  url: z.string(),
  rootUrl: z.string().optional(),
  name: z.string().optional(),
  totalUrls: z.number().optional(),
  executionTime: z.string().optional(),
  lastUpdated: z.string(),
  lastVisited: z.nullable(z.string()).optional(),
  error: z.string().optional(),
  metadata: PageMetadata$outboundSchema.optional(),
  cleanedHtml: z.string().optional(),
  extractedLinks: ExtractedLinks$outboundSchema.optional(),
  skippedUrls: SkippedLinks$outboundSchema.optional(),
  children: z.array(z.lazy(() => LinksTree$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinksTree$ {
  /** @deprecated use `LinksTree$inboundSchema` instead. */
  export const inboundSchema = LinksTree$inboundSchema;
  /** @deprecated use `LinksTree$outboundSchema` instead. */
  export const outboundSchema = LinksTree$outboundSchema;
  /** @deprecated use `LinksTree$Outbound` instead. */
  export type Outbound = LinksTree$Outbound;
}

export function linksTreeToJSON(linksTree: LinksTree): string {
  return JSON.stringify(LinksTree$outboundSchema.parse(linksTree));
}

export function linksTreeFromJSON(
  jsonString: string,
): SafeParseResult<LinksTree, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinksTree$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinksTree' from JSON`,
  );
}
