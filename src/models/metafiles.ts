/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MetaFiles = {
  /**
   * Content of the robots.txt file
   */
  robots?: string | undefined;
  /**
   * Content of the sitemap.xml file
   */
  sitemapXML?: string | undefined;
};

/** @internal */
export const MetaFiles$inboundSchema: z.ZodType<
  MetaFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  robots: z.string().optional(),
  sitemapXML: z.string().optional(),
});

/** @internal */
export type MetaFiles$Outbound = {
  robots?: string | undefined;
  sitemapXML?: string | undefined;
};

/** @internal */
export const MetaFiles$outboundSchema: z.ZodType<
  MetaFiles$Outbound,
  z.ZodTypeDef,
  MetaFiles
> = z.object({
  robots: z.string().optional(),
  sitemapXML: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetaFiles$ {
  /** @deprecated use `MetaFiles$inboundSchema` instead. */
  export const inboundSchema = MetaFiles$inboundSchema;
  /** @deprecated use `MetaFiles$outboundSchema` instead. */
  export const outboundSchema = MetaFiles$outboundSchema;
  /** @deprecated use `MetaFiles$Outbound` instead. */
  export type Outbound = MetaFiles$Outbound;
}

export function metaFilesToJSON(metaFiles: MetaFiles): string {
  return JSON.stringify(MetaFiles$outboundSchema.parse(metaFiles));
}

export function metaFilesFromJSON(
  jsonString: string,
): SafeParseResult<MetaFiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetaFiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetaFiles' from JSON`,
  );
}
