/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PageMetadata = {
  /**
   * Page title from title tag or meta title
   */
  title?: string | undefined;
  /**
   * Page description from meta description
   */
  description?: string | undefined;
  /**
   * Page language from html lang attribute
   */
  language?: string | undefined;
  /**
   * Canonical URL from link rel="canonical"
   */
  canonical?: string | undefined;
  /**
   * Robots directives from meta robots
   */
  robots?: string | undefined;
  /**
   * Author information from meta author
   */
  author?: string | undefined;
  /**
   * Keywords array from meta keywords
   */
  keywords?: Array<string> | undefined;
  /**
   * Last modified date from HTTP headers
   */
  lastModified?: string | null | undefined;
  /**
   * Favicon URL from link rel="icon" or similar
   */
  favicon?: string | undefined;
  /**
   * OpenGraph title from meta property="og:title"
   */
  ogTitle?: string | undefined;
  /**
   * OpenGraph description from meta property="og:description"
   */
  ogDescription?: string | undefined;
  /**
   * OpenGraph image URL from meta property="og:image"
   */
  ogImage?: string | undefined;
  /**
   * OpenGraph URL from meta property="og:url"
   */
  ogUrl?: string | undefined;
  /**
   * OpenGraph type from meta property="og:type"
   */
  ogType?: string | undefined;
  /**
   * OpenGraph site name from meta property="og:site_name"
   */
  ogSiteName?: string | undefined;
  /**
   * Twitter card type from meta name="twitter:card"
   */
  twitterCard?: string | undefined;
  /**
   * Twitter site username from meta name="twitter:site"
   */
  twitterSite?: string | undefined;
  /**
   * Twitter creator username from meta name="twitter:creator"
   */
  twitterCreator?: string | undefined;
  /**
   * Twitter title from meta name="twitter:title"
   */
  twitterTitle?: string | undefined;
  /**
   * Twitter description from meta name="twitter:description"
   */
  twitterDescription?: string | undefined;
  /**
   * Twitter image URL from meta name="twitter:image"
   */
  twitterImage?: string | undefined;
  /**
   * Whether iframe embedding is allowed
   */
  isIframeAllowed?: boolean | undefined;
};

/** @internal */
export const PageMetadata$inboundSchema: z.ZodType<
  PageMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  language: z.string().optional(),
  canonical: z.string().optional(),
  robots: z.string().optional(),
  author: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  lastModified: z.nullable(z.string()).optional(),
  favicon: z.string().optional(),
  ogTitle: z.string().optional(),
  ogDescription: z.string().optional(),
  ogImage: z.string().optional(),
  ogUrl: z.string().optional(),
  ogType: z.string().optional(),
  ogSiteName: z.string().optional(),
  twitterCard: z.string().optional(),
  twitterSite: z.string().optional(),
  twitterCreator: z.string().optional(),
  twitterTitle: z.string().optional(),
  twitterDescription: z.string().optional(),
  twitterImage: z.string().optional(),
  isIframeAllowed: z.boolean().optional(),
});

/** @internal */
export type PageMetadata$Outbound = {
  title?: string | undefined;
  description?: string | undefined;
  language?: string | undefined;
  canonical?: string | undefined;
  robots?: string | undefined;
  author?: string | undefined;
  keywords?: Array<string> | undefined;
  lastModified?: string | null | undefined;
  favicon?: string | undefined;
  ogTitle?: string | undefined;
  ogDescription?: string | undefined;
  ogImage?: string | undefined;
  ogUrl?: string | undefined;
  ogType?: string | undefined;
  ogSiteName?: string | undefined;
  twitterCard?: string | undefined;
  twitterSite?: string | undefined;
  twitterCreator?: string | undefined;
  twitterTitle?: string | undefined;
  twitterDescription?: string | undefined;
  twitterImage?: string | undefined;
  isIframeAllowed?: boolean | undefined;
};

/** @internal */
export const PageMetadata$outboundSchema: z.ZodType<
  PageMetadata$Outbound,
  z.ZodTypeDef,
  PageMetadata
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  language: z.string().optional(),
  canonical: z.string().optional(),
  robots: z.string().optional(),
  author: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  lastModified: z.nullable(z.string()).optional(),
  favicon: z.string().optional(),
  ogTitle: z.string().optional(),
  ogDescription: z.string().optional(),
  ogImage: z.string().optional(),
  ogUrl: z.string().optional(),
  ogType: z.string().optional(),
  ogSiteName: z.string().optional(),
  twitterCard: z.string().optional(),
  twitterSite: z.string().optional(),
  twitterCreator: z.string().optional(),
  twitterTitle: z.string().optional(),
  twitterDescription: z.string().optional(),
  twitterImage: z.string().optional(),
  isIframeAllowed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PageMetadata$ {
  /** @deprecated use `PageMetadata$inboundSchema` instead. */
  export const inboundSchema = PageMetadata$inboundSchema;
  /** @deprecated use `PageMetadata$outboundSchema` instead. */
  export const outboundSchema = PageMetadata$outboundSchema;
  /** @deprecated use `PageMetadata$Outbound` instead. */
  export type Outbound = PageMetadata$Outbound;
}

export function pageMetadataToJSON(pageMetadata: PageMetadata): string {
  return JSON.stringify(PageMetadata$outboundSchema.parse(pageMetadata));
}

export function pageMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PageMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PageMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PageMetadata' from JSON`,
  );
}
