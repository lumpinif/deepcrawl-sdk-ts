/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  HTMLCleaningOptions,
  HTMLCleaningOptions$inboundSchema,
  HTMLCleaningOptions$Outbound,
  HTMLCleaningOptions$outboundSchema,
} from "./htmlcleaningoptions.js";
import {
  LinkExtractionOptions,
  LinkExtractionOptions$inboundSchema,
  LinkExtractionOptions$Outbound,
  LinkExtractionOptions$outboundSchema,
} from "./linkextractionoptions.js";
import {
  LinksOrder,
  LinksOrder$inboundSchema,
  LinksOrder$outboundSchema,
} from "./linksorder.js";
import {
  MetadataOptions,
  MetadataOptions$inboundSchema,
  MetadataOptions$Outbound,
  MetadataOptions$outboundSchema,
} from "./metadataoptions.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * /links POST request body, links options schema
 */
export type ExtractLinksPostRequest = {
  /**
   * The valid URL to extract links from. This URL will be validated and normalized.
   */
  url: string;
  /**
   * Whether to build a site map tree.
   */
  tree?: boolean | null | undefined;
  /**
   * Whether to extract metadata from the page.
   */
  metadata?: boolean | null | undefined;
  /**
   * Whether to return cleaned HTML.
   */
  cleanedHtml?: boolean | null | undefined;
  /**
   * Whether to fetch and parse robots.txt.
   */
  robots?: boolean | null | undefined;
  /**
   * ( NOTE: sitemapXML is not stable yet, please use with caution. It may not work as expected. ) Whether to fetch and parse sitemap.xml.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  sitemapXML?: boolean | null | undefined;
  /**
   * Whether to place folders before leaf nodes in the tree.
   */
  folderFirst?: boolean | null | undefined;
  /**
   * How to order links within each folder: "page" (preserve original order) or "alphabetical" (sort Aâ†’Z by URL).
   */
  linksOrder?: LinksOrder | undefined;
  /**
   * Whether to include extracted links for each node in the tree.
   */
  extractedLinks?: boolean | null | undefined;
  /**
   * Whether to treat subdomain as root URL. If false, subdomain will be excluded from root URL.
   */
  subdomainAsRootUrl?: boolean | null | undefined;
  /**
   * Options for metadata extraction.
   */
  metadataOptions?: MetadataOptions | undefined;
  linksOptions?: LinkExtractionOptions | undefined;
  cleanedHtmlOptions?: HTMLCleaningOptions | undefined;
};

/** @internal */
export const ExtractLinksPostRequest$inboundSchema: z.ZodType<
  ExtractLinksPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  tree: z.nullable(z.boolean().default(true)),
  metadata: z.nullable(z.boolean().default(true)),
  cleanedHtml: z.nullable(z.boolean().default(false)),
  robots: z.nullable(z.boolean().default(false)),
  sitemapXML: z.nullable(z.boolean().default(false)),
  folderFirst: z.nullable(z.boolean()).optional(),
  linksOrder: LinksOrder$inboundSchema.optional(),
  extractedLinks: z.nullable(z.boolean()).optional(),
  subdomainAsRootUrl: z.nullable(z.boolean()).optional(),
  metadataOptions: MetadataOptions$inboundSchema.optional(),
  linksOptions: LinkExtractionOptions$inboundSchema.optional(),
  cleanedHtmlOptions: HTMLCleaningOptions$inboundSchema.optional(),
});

/** @internal */
export type ExtractLinksPostRequest$Outbound = {
  url: string;
  tree: boolean | null;
  metadata: boolean | null;
  cleanedHtml: boolean | null;
  robots: boolean | null;
  sitemapXML: boolean | null;
  folderFirst?: boolean | null | undefined;
  linksOrder?: string | undefined;
  extractedLinks?: boolean | null | undefined;
  subdomainAsRootUrl?: boolean | null | undefined;
  metadataOptions?: MetadataOptions$Outbound | undefined;
  linksOptions?: LinkExtractionOptions$Outbound | undefined;
  cleanedHtmlOptions?: HTMLCleaningOptions$Outbound | undefined;
};

/** @internal */
export const ExtractLinksPostRequest$outboundSchema: z.ZodType<
  ExtractLinksPostRequest$Outbound,
  z.ZodTypeDef,
  ExtractLinksPostRequest
> = z.object({
  url: z.string(),
  tree: z.nullable(z.boolean().default(true)),
  metadata: z.nullable(z.boolean().default(true)),
  cleanedHtml: z.nullable(z.boolean().default(false)),
  robots: z.nullable(z.boolean().default(false)),
  sitemapXML: z.nullable(z.boolean().default(false)),
  folderFirst: z.nullable(z.boolean()).optional(),
  linksOrder: LinksOrder$outboundSchema.optional(),
  extractedLinks: z.nullable(z.boolean()).optional(),
  subdomainAsRootUrl: z.nullable(z.boolean()).optional(),
  metadataOptions: MetadataOptions$outboundSchema.optional(),
  linksOptions: LinkExtractionOptions$outboundSchema.optional(),
  cleanedHtmlOptions: HTMLCleaningOptions$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtractLinksPostRequest$ {
  /** @deprecated use `ExtractLinksPostRequest$inboundSchema` instead. */
  export const inboundSchema = ExtractLinksPostRequest$inboundSchema;
  /** @deprecated use `ExtractLinksPostRequest$outboundSchema` instead. */
  export const outboundSchema = ExtractLinksPostRequest$outboundSchema;
  /** @deprecated use `ExtractLinksPostRequest$Outbound` instead. */
  export type Outbound = ExtractLinksPostRequest$Outbound;
}

export function extractLinksPostRequestToJSON(
  extractLinksPostRequest: ExtractLinksPostRequest,
): string {
  return JSON.stringify(
    ExtractLinksPostRequest$outboundSchema.parse(extractLinksPostRequest),
  );
}

export function extractLinksPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExtractLinksPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtractLinksPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtractLinksPostRequest' from JSON`,
  );
}
