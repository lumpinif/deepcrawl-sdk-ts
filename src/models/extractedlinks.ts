/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Media files categorized by type
 */
export type ExtractedLinksMedia = {
  /**
   * Array of image file URLs
   */
  images?: Array<string> | undefined;
  /**
   * Array of video file URLs
   */
  videos?: Array<string> | undefined;
  /**
   * Array of document file URLs
   */
  documents?: Array<string> | undefined;
};

export type ExtractedLinks = {
  /**
   * Array of internal links from the same domain
   */
  internal?: Array<string> | undefined;
  /**
   * Array of external links from other domains
   */
  external?: Array<string> | undefined;
  /**
   * Media files categorized by type
   */
  media?: ExtractedLinksMedia | undefined;
};

/** @internal */
export const ExtractedLinksMedia$inboundSchema: z.ZodType<
  ExtractedLinksMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  images: z.array(z.string()).optional(),
  videos: z.array(z.string()).optional(),
  documents: z.array(z.string()).optional(),
});

/** @internal */
export type ExtractedLinksMedia$Outbound = {
  images?: Array<string> | undefined;
  videos?: Array<string> | undefined;
  documents?: Array<string> | undefined;
};

/** @internal */
export const ExtractedLinksMedia$outboundSchema: z.ZodType<
  ExtractedLinksMedia$Outbound,
  z.ZodTypeDef,
  ExtractedLinksMedia
> = z.object({
  images: z.array(z.string()).optional(),
  videos: z.array(z.string()).optional(),
  documents: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtractedLinksMedia$ {
  /** @deprecated use `ExtractedLinksMedia$inboundSchema` instead. */
  export const inboundSchema = ExtractedLinksMedia$inboundSchema;
  /** @deprecated use `ExtractedLinksMedia$outboundSchema` instead. */
  export const outboundSchema = ExtractedLinksMedia$outboundSchema;
  /** @deprecated use `ExtractedLinksMedia$Outbound` instead. */
  export type Outbound = ExtractedLinksMedia$Outbound;
}

export function extractedLinksMediaToJSON(
  extractedLinksMedia: ExtractedLinksMedia,
): string {
  return JSON.stringify(
    ExtractedLinksMedia$outboundSchema.parse(extractedLinksMedia),
  );
}

export function extractedLinksMediaFromJSON(
  jsonString: string,
): SafeParseResult<ExtractedLinksMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtractedLinksMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtractedLinksMedia' from JSON`,
  );
}

/** @internal */
export const ExtractedLinks$inboundSchema: z.ZodType<
  ExtractedLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  internal: z.array(z.string()).optional(),
  external: z.array(z.string()).optional(),
  media: z.lazy(() => ExtractedLinksMedia$inboundSchema).optional(),
});

/** @internal */
export type ExtractedLinks$Outbound = {
  internal?: Array<string> | undefined;
  external?: Array<string> | undefined;
  media?: ExtractedLinksMedia$Outbound | undefined;
};

/** @internal */
export const ExtractedLinks$outboundSchema: z.ZodType<
  ExtractedLinks$Outbound,
  z.ZodTypeDef,
  ExtractedLinks
> = z.object({
  internal: z.array(z.string()).optional(),
  external: z.array(z.string()).optional(),
  media: z.lazy(() => ExtractedLinksMedia$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtractedLinks$ {
  /** @deprecated use `ExtractedLinks$inboundSchema` instead. */
  export const inboundSchema = ExtractedLinks$inboundSchema;
  /** @deprecated use `ExtractedLinks$outboundSchema` instead. */
  export const outboundSchema = ExtractedLinks$outboundSchema;
  /** @deprecated use `ExtractedLinks$Outbound` instead. */
  export type Outbound = ExtractedLinks$Outbound;
}

export function extractedLinksToJSON(extractedLinks: ExtractedLinks): string {
  return JSON.stringify(ExtractedLinks$outboundSchema.parse(extractedLinks));
}

export function extractedLinksFromJSON(
  jsonString: string,
): SafeParseResult<ExtractedLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtractedLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtractedLinks' from JSON`,
  );
}
