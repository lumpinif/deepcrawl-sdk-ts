/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExtractedLinks,
  ExtractedLinks$inboundSchema,
  ExtractedLinks$Outbound,
  ExtractedLinks$outboundSchema,
} from "./extractedlinks.js";
import {
  LinksTree,
  LinksTree$inboundSchema,
  LinksTree$Outbound,
  LinksTree$outboundSchema,
} from "./linkstree.js";
import {
  MetaFiles,
  MetaFiles$inboundSchema,
  MetaFiles$Outbound,
  MetaFiles$outboundSchema,
} from "./metafiles.js";
import {
  PageMetadata,
  PageMetadata$inboundSchema,
  PageMetadata$Outbound,
  PageMetadata$outboundSchema,
} from "./pagemetadata.js";
import {
  SkippedLinks,
  SkippedLinks$inboundSchema,
  SkippedLinks$Outbound,
  SkippedLinks$outboundSchema,
} from "./skippedlinks.js";

export type LinksPostSuccessResponse = {
  success: boolean;
  targetUrl: string;
  timestamp: string;
  title?: string | undefined;
  description?: string | undefined;
  metadata?: PageMetadata | undefined;
  cleanedHtml?: string | undefined;
  metaFiles?: MetaFiles | undefined;
  cached: boolean;
  executionTime?: string | undefined;
  ancestors?: Array<string> | undefined;
  skippedUrls?: SkippedLinks | undefined;
  extractedLinks?: ExtractedLinks | undefined;
  tree?: LinksTree | null | undefined;
};

/** @internal */
export const LinksPostSuccessResponse$inboundSchema: z.ZodType<
  LinksPostSuccessResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  targetUrl: z.string(),
  timestamp: z.string(),
  title: z.string().optional(),
  description: z.string().optional(),
  metadata: PageMetadata$inboundSchema.optional(),
  cleanedHtml: z.string().optional(),
  metaFiles: MetaFiles$inboundSchema.optional(),
  cached: z.boolean(),
  executionTime: z.string().optional(),
  ancestors: z.array(z.string()).optional(),
  skippedUrls: SkippedLinks$inboundSchema.optional(),
  extractedLinks: ExtractedLinks$inboundSchema.optional(),
  tree: z.nullable(LinksTree$inboundSchema).optional(),
});

/** @internal */
export type LinksPostSuccessResponse$Outbound = {
  success: boolean;
  targetUrl: string;
  timestamp: string;
  title?: string | undefined;
  description?: string | undefined;
  metadata?: PageMetadata$Outbound | undefined;
  cleanedHtml?: string | undefined;
  metaFiles?: MetaFiles$Outbound | undefined;
  cached: boolean;
  executionTime?: string | undefined;
  ancestors?: Array<string> | undefined;
  skippedUrls?: SkippedLinks$Outbound | undefined;
  extractedLinks?: ExtractedLinks$Outbound | undefined;
  tree?: LinksTree$Outbound | null | undefined;
};

/** @internal */
export const LinksPostSuccessResponse$outboundSchema: z.ZodType<
  LinksPostSuccessResponse$Outbound,
  z.ZodTypeDef,
  LinksPostSuccessResponse
> = z.object({
  success: z.boolean(),
  targetUrl: z.string(),
  timestamp: z.string(),
  title: z.string().optional(),
  description: z.string().optional(),
  metadata: PageMetadata$outboundSchema.optional(),
  cleanedHtml: z.string().optional(),
  metaFiles: MetaFiles$outboundSchema.optional(),
  cached: z.boolean(),
  executionTime: z.string().optional(),
  ancestors: z.array(z.string()).optional(),
  skippedUrls: SkippedLinks$outboundSchema.optional(),
  extractedLinks: ExtractedLinks$outboundSchema.optional(),
  tree: z.nullable(LinksTree$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinksPostSuccessResponse$ {
  /** @deprecated use `LinksPostSuccessResponse$inboundSchema` instead. */
  export const inboundSchema = LinksPostSuccessResponse$inboundSchema;
  /** @deprecated use `LinksPostSuccessResponse$outboundSchema` instead. */
  export const outboundSchema = LinksPostSuccessResponse$outboundSchema;
  /** @deprecated use `LinksPostSuccessResponse$Outbound` instead. */
  export type Outbound = LinksPostSuccessResponse$Outbound;
}

export function linksPostSuccessResponseToJSON(
  linksPostSuccessResponse: LinksPostSuccessResponse,
): string {
  return JSON.stringify(
    LinksPostSuccessResponse$outboundSchema.parse(linksPostSuccessResponse),
  );
}

export function linksPostSuccessResponseFromJSON(
  jsonString: string,
): SafeParseResult<LinksPostSuccessResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinksPostSuccessResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinksPostSuccessResponse' from JSON`,
  );
}
