/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  SkippedUrl,
  SkippedUrl$inboundSchema,
  SkippedUrl$Outbound,
  SkippedUrl$outboundSchema,
} from "./skippedurl.js";

/**
 * Media URLs that were skipped during processing
 */
export type SkippedLinksMedia = {
  /**
   * Image URLs that were skipped during processing
   */
  images?: Array<SkippedUrl> | undefined;
  /**
   * Video URLs that were skipped during processing
   */
  videos?: Array<SkippedUrl> | undefined;
  /**
   * Document URLs that were skipped during processing
   */
  documents?: Array<SkippedUrl> | undefined;
};

export type SkippedLinks = {
  /**
   * Internal URLs that were skipped during processing
   */
  internal?: Array<SkippedUrl> | undefined;
  /**
   * External URLs that were skipped during processing
   */
  external?: Array<SkippedUrl> | undefined;
  /**
   * Media URLs that were skipped during processing
   */
  media?: SkippedLinksMedia | undefined;
  /**
   * Other URLs that were skipped during processing
   */
  other?: Array<SkippedUrl> | undefined;
};

/** @internal */
export const SkippedLinksMedia$inboundSchema: z.ZodType<
  SkippedLinksMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  images: z.array(SkippedUrl$inboundSchema).optional(),
  videos: z.array(SkippedUrl$inboundSchema).optional(),
  documents: z.array(SkippedUrl$inboundSchema).optional(),
});

/** @internal */
export type SkippedLinksMedia$Outbound = {
  images?: Array<SkippedUrl$Outbound> | undefined;
  videos?: Array<SkippedUrl$Outbound> | undefined;
  documents?: Array<SkippedUrl$Outbound> | undefined;
};

/** @internal */
export const SkippedLinksMedia$outboundSchema: z.ZodType<
  SkippedLinksMedia$Outbound,
  z.ZodTypeDef,
  SkippedLinksMedia
> = z.object({
  images: z.array(SkippedUrl$outboundSchema).optional(),
  videos: z.array(SkippedUrl$outboundSchema).optional(),
  documents: z.array(SkippedUrl$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkippedLinksMedia$ {
  /** @deprecated use `SkippedLinksMedia$inboundSchema` instead. */
  export const inboundSchema = SkippedLinksMedia$inboundSchema;
  /** @deprecated use `SkippedLinksMedia$outboundSchema` instead. */
  export const outboundSchema = SkippedLinksMedia$outboundSchema;
  /** @deprecated use `SkippedLinksMedia$Outbound` instead. */
  export type Outbound = SkippedLinksMedia$Outbound;
}

export function skippedLinksMediaToJSON(
  skippedLinksMedia: SkippedLinksMedia,
): string {
  return JSON.stringify(
    SkippedLinksMedia$outboundSchema.parse(skippedLinksMedia),
  );
}

export function skippedLinksMediaFromJSON(
  jsonString: string,
): SafeParseResult<SkippedLinksMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkippedLinksMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkippedLinksMedia' from JSON`,
  );
}

/** @internal */
export const SkippedLinks$inboundSchema: z.ZodType<
  SkippedLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  internal: z.array(SkippedUrl$inboundSchema).optional(),
  external: z.array(SkippedUrl$inboundSchema).optional(),
  media: z.lazy(() => SkippedLinksMedia$inboundSchema).optional(),
  other: z.array(SkippedUrl$inboundSchema).optional(),
});

/** @internal */
export type SkippedLinks$Outbound = {
  internal?: Array<SkippedUrl$Outbound> | undefined;
  external?: Array<SkippedUrl$Outbound> | undefined;
  media?: SkippedLinksMedia$Outbound | undefined;
  other?: Array<SkippedUrl$Outbound> | undefined;
};

/** @internal */
export const SkippedLinks$outboundSchema: z.ZodType<
  SkippedLinks$Outbound,
  z.ZodTypeDef,
  SkippedLinks
> = z.object({
  internal: z.array(SkippedUrl$outboundSchema).optional(),
  external: z.array(SkippedUrl$outboundSchema).optional(),
  media: z.lazy(() => SkippedLinksMedia$outboundSchema).optional(),
  other: z.array(SkippedUrl$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkippedLinks$ {
  /** @deprecated use `SkippedLinks$inboundSchema` instead. */
  export const inboundSchema = SkippedLinks$inboundSchema;
  /** @deprecated use `SkippedLinks$outboundSchema` instead. */
  export const outboundSchema = SkippedLinks$outboundSchema;
  /** @deprecated use `SkippedLinks$Outbound` instead. */
  export type Outbound = SkippedLinks$Outbound;
}

export function skippedLinksToJSON(skippedLinks: SkippedLinks): string {
  return JSON.stringify(SkippedLinks$outboundSchema.parse(skippedLinks));
}

export function skippedLinksFromJSON(
  jsonString: string,
): SafeParseResult<SkippedLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkippedLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkippedLinks' from JSON`,
  );
}
