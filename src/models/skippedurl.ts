/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SkippedUrl = {
  /**
   * The URL that was skipped during processing
   */
  url: string;
  /**
   * The reason why this URL was skipped
   */
  reason: string;
};

/** @internal */
export const SkippedUrl$inboundSchema: z.ZodType<
  SkippedUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  reason: z.string(),
});

/** @internal */
export type SkippedUrl$Outbound = {
  url: string;
  reason: string;
};

/** @internal */
export const SkippedUrl$outboundSchema: z.ZodType<
  SkippedUrl$Outbound,
  z.ZodTypeDef,
  SkippedUrl
> = z.object({
  url: z.string(),
  reason: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkippedUrl$ {
  /** @deprecated use `SkippedUrl$inboundSchema` instead. */
  export const inboundSchema = SkippedUrl$inboundSchema;
  /** @deprecated use `SkippedUrl$outboundSchema` instead. */
  export const outboundSchema = SkippedUrl$outboundSchema;
  /** @deprecated use `SkippedUrl$Outbound` instead. */
  export type Outbound = SkippedUrl$Outbound;
}

export function skippedUrlToJSON(skippedUrl: SkippedUrl): string {
  return JSON.stringify(SkippedUrl$outboundSchema.parse(skippedUrl));
}

export function skippedUrlFromJSON(
  jsonString: string,
): SafeParseResult<SkippedUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkippedUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkippedUrl' from JSON`,
  );
}
